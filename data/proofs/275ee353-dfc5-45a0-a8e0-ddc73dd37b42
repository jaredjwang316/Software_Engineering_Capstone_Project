import Mathlib.Tactic.Ring

-- summing 1 + 2 + ... + n
def sum_first_n(n: Nat) : Nat :=
  match n with
  | 0 => 0
  | m + 1 => m + 1 + sum_first_n m

-- summing 1 + 2 + ... + n == n * (n + 1) / 2
theorem sum_first_n_eq_my_definition(n: Nat) : sum_first_n n = n * (n + 1) / 2 := by
  induction n
  . simp [sum_first_n]
  case succ m ih =>
    simp [sum_first_n]
    rw [ih]
    ring_nf
    rw [(by ring: m * 3 = m * 2 + m)]
    rw [(by ring: 2 + (m * 2 + m) = 2 * (m + 1) + m)]
    rw [Nat.add_assoc (2 * (m + 1)) _ _, Nat.add_comm (2 * (m + 1)) _]
    rw [Nat.add_mul_div_left _ _ (by decide : (0 < 2))]
    ring
